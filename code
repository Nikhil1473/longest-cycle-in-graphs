class Solution {
public:
void dfs(int i,vector<int>& edges,unordered_map<int,int> dist,vector<bool> &visited,int &answer){
   // int answer=INT_MIN;
    visited[i]=true;
    int neigh=edges[i];
    if(neigh!=-1 && !visited[neigh]){
        dist[neigh]=1+dist[i];//simply visited krr jao uss neigh ko
       dfs(neigh,edges,dist,visited,answer);
        }
        else if(neigh!=-1 && dist.count(neigh)){
            answer=max(answer,dist[i]-dist[neigh]+1);
        }
}
    int longestCycle(vector<int>& edges) {
        int n=edges.size();
        int answer=-1;
        vector<bool> visited(n);
        for(int i=0;i<n;i++){
            if(!visited[i]){
                unordered_map<int,int> dist;
                dist[i]=1;
            dfs(i,edges,dist,visited,answer);
            }
        }
        return answer;
    }
};
